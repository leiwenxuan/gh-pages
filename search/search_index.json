{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230\u4ee3\u7801\u7684\u4e16\u754c\u3002 \u77e5\u8bc6\u7684\u79ef\u7d2f\uff0c \u4ece\u6765\u6ca1\u6709\u6377\u5f84\uff0c\u552f\u6709\u5927\u91cf\u7684\u7ec3\u4e60\u624d\u80fd\u8d28\u53d8","title":"Home"},{"location":"#_1","text":"","title":"\u6b22\u8fce\u6765\u5230\u4ee3\u7801\u7684\u4e16\u754c\u3002"},{"location":"#_2","text":"","title":"\u77e5\u8bc6\u7684\u79ef\u7d2f\uff0c \u4ece\u6765\u6ca1\u6709\u6377\u5f84\uff0c\u552f\u6709\u5927\u91cf\u7684\u7ec3\u4e60\u624d\u80fd\u8d28\u53d8"},{"location":"RBAC/","text":"November 27, 2018 7:16 PM RBAC\u57fa\u7840\u4e0a\u5b9e\u73b0\u4e0d\u540c\u7684\u7528\u6237\u4e0d\u540c\u7684\u754c\u9762.md \u5b9e\u73b0\u4e0d\u540c\u7684\u7528\u6237\u4e0d\u540c\u7684\u754c\u9762 \u5728\u6743\u9650\u8868\u8bbe\u7f6e\u5b57\u6bb5\u533a\u5206\u4e0d\u540c\u7684\u6743\u9650 is_menu \u51b3\u5b9a\u8fd9\u4e2a\uff35\uff32\uff2c\u5728\u4e0d\u5728\u89c6\u56fe\u4e0a\u663e\u793a\u3000 # \u6743\u9650\u8868 class UserPurview(models.Model): title = models.CharField(max_length=32) url = models.CharField(max_length=80) is_menu = models.BooleanField(default=False, verbose_name='\u83dc\u5355') icon = models.CharField(max_length=24, null=True, blank=True, verbose_name='\u56fe\u6807') \u8bbe\u7f6esession \u67e5\u8be2\u8868\u6ce8\u610f\u53bb\u91cd QuerySet\u5bf9\u8c61.distinct() \u8fd9\u91cc\u628a\u8bbe\u7f6esession \u7684\u4ee3\u7801\u5c01\u88c5\u4e86\u5de5\u5177 \u628a\u76f8\u540c\u53ef\u4ee5\u5b9e\u73b0\u591a\u6b21\u7684\u8c03\u7528\u7684\u4ee3\u7801\u7247\u6bb5\u5b9e\u73b0\u5c01\u88c5\uff0c\u9762\u5bf9\u51fd\u6570\u7f16\u7a0b\uff0c\u9886\u609f\u9762\u5bf9\u5bf9\u8c61\u5f0f\u7f16\u7a0b ''' \u8bbe\u7f6esession\u3000\u6570\u636e ''' from SZcrm import settings def init(request, user_obj): # 1.\u67e5\u8be2\u7528\u6237\u6743\u9650 # 2.\u628a\u67e5\u8be2\u7684url \u6dfb\u52a0\u5230session \u91cc\u9762 url_list = user_obj.roles.all().values( 'permissions__url', 'permissions__title', 'permissions__is_menu', 'permissions__icon').distinct() # \u8fd4\u56de\u7684QuerySet\u5bf9\u8c61\uff0c\u6ca1\u4e2a\u5143\u7d20\u90fd\u662f\u5143\u7ec4 # 3.\u628a\u67e5\u8be2\u7684\uff55\uff52\uff4c\u52a0\u5165\u5217\u8868 # \u53d6\u5230url_list # permissions_list = [permissions['permissions__url'] for permissions in url_list] permissions_list = [] # \u5b58\u653e\u83dc\u5355\u5217\u8868 menu_list = [] for i in url_list: permissions_list.append(i['permissions__url']) if i.get('permissions__is_menu'): menu_list.append({ 'url': i['permissions__url'], 'title': i['permissions__title'], 'icon': i['permissions__icon'], }) session_key = getattr(settings, 'PERMISSION_URL_KEY', 'permissions_url') menu_key = getattr(settings, 'SECRET_MENU', 'menu_list') # \u8bbe\u7f6esession, \u5b58\u53d6menu\u5217\u8868 request.session[menu_key] = menu_list # \u8bbe\u7f6esession, \u5b58\u53d6\uff55\uff52\uff4c\u5217\u8868 request.session[session_key] = permissions_list \u524d\u7aef\u7684\u4ee3\u7801\u5b9e\u73b0 \u5728\u5199\u7a0b\u5e8f\u4e4b\u524d\u60f3\u60f3\u5982\u4f55\u89c4\u8303\u4ee3\u7801\u7684\u5065\u58ee\u578b\u3002 \u524d\u7aef\u63a5\u53d7\u6570\u636e\u4f9d\u8d56\u540e\u7aef\uff0c\u6709\u4e00\u4e9b\u53d8\u91cf\u6211\u4eec\u5199\u5728\u4e86\u914d\u7f6e\u6587\u4ef6\u91cc\u9762\uff0c\u3000\u9632\u6b62\u540e\u671f\u53d8\u52a8\uff0c\u5f71\u54cd\u6574\u4e2a\u9879\u76ee\u3002\u90a3\u4e48\u524d\u7aef\u5982\u4f55\u5b9e\u73b0\u5462 \u81ea\u5b9a\u4e49django \u6a21\u677f\u51fd\u6570\u3000inclusion_tag 1.\u5728\u5f53\u524d\u7684\uff41\uff50\uff50\u4e0b\u5efa\u7acbtemplatetags\u5305 2. from django import template register = template.Library() \u81ea\u5df1\u7684\u4e1a\u52a1\u903b\u8f91 \u4ee3\u7801\u5b9e\u73b0 from django import template from SZcrm import settings import re register = template.Library() @register.inclusion_tag(filename='rbac/menu.html') def meun_list(request): # \uff11\uff0e \u83b7\u53d6\u5f53\u524d\u7684url new_url = request.path_info # \uff12\uff0e \u83b7\u53d6session\u3000\u50a8\u5b58\u7684session\u3000key meun_key = getattr(settings, 'SECRET_MENU', 'menu_list') # 3. \u83b7\u53d6session \u91cc\u9762\u7684\u6743\u9650\u9650\u5b9a meun_list = request.session.get(meun_key) # 4.\u3000\u5faa\u73af\u5224\u65ad\uff1a\u5982\u679c\u5f53\u524d\u7684\uff55\uff52\uff4c\u5728\u6743\u9650\u91cc\u9762\u52a0\u4e00\u4e2acss\u6837\u5f0f\uff0c for meun in meun_list: if re.match(r'^{}$'.format(meun['url']), new_url): meun['class'] = 'active' return {'menu_list': meun_list} inclusion_tag html \u4ee3\u7801\u3000\u4e0e\u4e0d\u540c\u7684\u524d\u7aef\u4ee3\u7801\u65e0\u533a\u522b <ul class=\"nav nav-sidebar navbar-inverse\"> {% for menu in menu_list %} <li class=\"{{ menu.class }}\"><a href=\"{{ menu.url }}\"><span class=\"icon-wrap\"><i class=\"fa {{ menu.icon }}\"></i></span>{{ menu.title }}</a></li> {% endfor %} </ul> \u65f6\u523b\u6ce8\u610f\u6587\u4ef6\u8def\u5f84\u95ee\u9898\uff0c\u3000\u6570\u636e\u5e93\u5bfc\u5165\u3000\u6700\u4e3a\u91cd\u8981\u7684\u662f\u6284\u4ee3\u7801\u5355\u8bcd\u95ee\u9898","title":"RBAC"},{"location":"RBAC/#november-27-2018-716-pm","text":"","title":"November 27, 2018 7:16 PM"},{"location":"RBAC/#rbacmd","text":"","title":"RBAC\u57fa\u7840\u4e0a\u5b9e\u73b0\u4e0d\u540c\u7684\u7528\u6237\u4e0d\u540c\u7684\u754c\u9762.md"},{"location":"RBAC/#_1","text":"","title":"\u5b9e\u73b0\u4e0d\u540c\u7684\u7528\u6237\u4e0d\u540c\u7684\u754c\u9762"},{"location":"RBAC/#_2","text":"is_menu \u51b3\u5b9a\u8fd9\u4e2a\uff35\uff32\uff2c\u5728\u4e0d\u5728\u89c6\u56fe\u4e0a\u663e\u793a\u3000 # \u6743\u9650\u8868 class UserPurview(models.Model): title = models.CharField(max_length=32) url = models.CharField(max_length=80) is_menu = models.BooleanField(default=False, verbose_name='\u83dc\u5355') icon = models.CharField(max_length=24, null=True, blank=True, verbose_name='\u56fe\u6807')","title":"\u5728\u6743\u9650\u8868\u8bbe\u7f6e\u5b57\u6bb5\u533a\u5206\u4e0d\u540c\u7684\u6743\u9650"},{"location":"RBAC/#session","text":"\u67e5\u8be2\u8868\u6ce8\u610f\u53bb\u91cd","title":"\u8bbe\u7f6esession"},{"location":"RBAC/#querysetdistinct","text":"","title":"QuerySet\u5bf9\u8c61.distinct()"},{"location":"RBAC/#session_1","text":"","title":"\u8fd9\u91cc\u628a\u8bbe\u7f6esession \u7684\u4ee3\u7801\u5c01\u88c5\u4e86\u5de5\u5177"},{"location":"RBAC/#_3","text":"''' \u8bbe\u7f6esession\u3000\u6570\u636e ''' from SZcrm import settings def init(request, user_obj): # 1.\u67e5\u8be2\u7528\u6237\u6743\u9650 # 2.\u628a\u67e5\u8be2\u7684url \u6dfb\u52a0\u5230session \u91cc\u9762 url_list = user_obj.roles.all().values( 'permissions__url', 'permissions__title', 'permissions__is_menu', 'permissions__icon').distinct() # \u8fd4\u56de\u7684QuerySet\u5bf9\u8c61\uff0c\u6ca1\u4e2a\u5143\u7d20\u90fd\u662f\u5143\u7ec4 # 3.\u628a\u67e5\u8be2\u7684\uff55\uff52\uff4c\u52a0\u5165\u5217\u8868 # \u53d6\u5230url_list # permissions_list = [permissions['permissions__url'] for permissions in url_list] permissions_list = [] # \u5b58\u653e\u83dc\u5355\u5217\u8868 menu_list = [] for i in url_list: permissions_list.append(i['permissions__url']) if i.get('permissions__is_menu'): menu_list.append({ 'url': i['permissions__url'], 'title': i['permissions__title'], 'icon': i['permissions__icon'], }) session_key = getattr(settings, 'PERMISSION_URL_KEY', 'permissions_url') menu_key = getattr(settings, 'SECRET_MENU', 'menu_list') # \u8bbe\u7f6esession, \u5b58\u53d6menu\u5217\u8868 request.session[menu_key] = menu_list # \u8bbe\u7f6esession, \u5b58\u53d6\uff55\uff52\uff4c\u5217\u8868 request.session[session_key] = permissions_list","title":"\u628a\u76f8\u540c\u53ef\u4ee5\u5b9e\u73b0\u591a\u6b21\u7684\u8c03\u7528\u7684\u4ee3\u7801\u7247\u6bb5\u5b9e\u73b0\u5c01\u88c5\uff0c\u9762\u5bf9\u51fd\u6570\u7f16\u7a0b\uff0c\u9886\u609f\u9762\u5bf9\u5bf9\u8c61\u5f0f\u7f16\u7a0b"},{"location":"RBAC/#_4","text":"","title":"\u524d\u7aef\u7684\u4ee3\u7801\u5b9e\u73b0"},{"location":"RBAC/#_5","text":"\u524d\u7aef\u63a5\u53d7\u6570\u636e\u4f9d\u8d56\u540e\u7aef\uff0c\u6709\u4e00\u4e9b\u53d8\u91cf\u6211\u4eec\u5199\u5728\u4e86\u914d\u7f6e\u6587\u4ef6\u91cc\u9762\uff0c\u3000\u9632\u6b62\u540e\u671f\u53d8\u52a8\uff0c\u5f71\u54cd\u6574\u4e2a\u9879\u76ee\u3002\u90a3\u4e48\u524d\u7aef\u5982\u4f55\u5b9e\u73b0\u5462","title":"\u5728\u5199\u7a0b\u5e8f\u4e4b\u524d\u60f3\u60f3\u5982\u4f55\u89c4\u8303\u4ee3\u7801\u7684\u5065\u58ee\u578b\u3002"},{"location":"RBAC/#django-inclusion_tag","text":"1.\u5728\u5f53\u524d\u7684\uff41\uff50\uff50\u4e0b\u5efa\u7acbtemplatetags\u5305 2. from django import template register = template.Library() \u81ea\u5df1\u7684\u4e1a\u52a1\u903b\u8f91","title":"\u81ea\u5b9a\u4e49django \u6a21\u677f\u51fd\u6570\u3000inclusion_tag"},{"location":"RBAC/#_6","text":"from django import template from SZcrm import settings import re register = template.Library() @register.inclusion_tag(filename='rbac/menu.html') def meun_list(request): # \uff11\uff0e \u83b7\u53d6\u5f53\u524d\u7684url new_url = request.path_info # \uff12\uff0e \u83b7\u53d6session\u3000\u50a8\u5b58\u7684session\u3000key meun_key = getattr(settings, 'SECRET_MENU', 'menu_list') # 3. \u83b7\u53d6session \u91cc\u9762\u7684\u6743\u9650\u9650\u5b9a meun_list = request.session.get(meun_key) # 4.\u3000\u5faa\u73af\u5224\u65ad\uff1a\u5982\u679c\u5f53\u524d\u7684\uff55\uff52\uff4c\u5728\u6743\u9650\u91cc\u9762\u52a0\u4e00\u4e2acss\u6837\u5f0f\uff0c for meun in meun_list: if re.match(r'^{}$'.format(meun['url']), new_url): meun['class'] = 'active' return {'menu_list': meun_list}","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"RBAC/#inclusion_tag-html","text":"<ul class=\"nav nav-sidebar navbar-inverse\"> {% for menu in menu_list %} <li class=\"{{ menu.class }}\"><a href=\"{{ menu.url }}\"><span class=\"icon-wrap\"><i class=\"fa {{ menu.icon }}\"></i></span>{{ menu.title }}</a></li> {% endfor %} </ul>","title":"inclusion_tag html \u4ee3\u7801\u3000\u4e0e\u4e0d\u540c\u7684\u524d\u7aef\u4ee3\u7801\u65e0\u533a\u522b"},{"location":"RBAC/#_7","text":"","title":"\u65f6\u523b\u6ce8\u610f\u6587\u4ef6\u8def\u5f84\u95ee\u9898\uff0c\u3000\u6570\u636e\u5e93\u5bfc\u5165\u3000\u6700\u4e3a\u91cd\u8981\u7684\u662f\u6284\u4ee3\u7801\u5355\u8bcd\u95ee\u9898"},{"location":"about/","text":"Et faciat texebas sororum locus volucres sanguine Sedit ferox Lorem markdownum ex postquam, Lelegas premebat, nefandam pedibusque fonte transitus cruentatis exclamat genus nil: structis inclusos postquam. Est videt. Tamen quod veram, torva tenet igne summis suos linguae. Deseruit torquere flavescit nymphae iamque. Ut veni, sunt dryades est et iamque Lyncidae subit nec feruntur rerum donec! Tremit aere auctor Quia erat Phoebus Desiluit ad non Illa conpleat ipse Clipei currus ora vana duabus deae maxima laude , pectora tractaque ituros. Surgere sic vultu traxit in magno, sit fuisses potest congestaque quas? Amyntore figitur meum. Aut siste aequore hoc nec dabitur illis, Laelapa laetabitur ad dote cur! In ministrae congeriem et prodet solvi cuncta rumpitque iaculum Melaneus coniugis; rabieque roseo cum regales Clymeni parit : haurire. Se sumus ora clausit, nondum ab latratibus oscula ungues, favillae flumina fidissima. Meritum plumas certamen cumque. Cacumina luridaque meminitque cladem attollite plurima discusso fefellerat fecit Britannos rimis. Carinae quas, poscitur vento, tradere corpora cura alveus nostris traherent pectora uteri nimiumque feremus. Primaque et lanas absens traherent, factis merum vicina nutu locoque, illo circumspectis suam. Finita nataque contrahitur non qui exsistunt corpora Retro terrae ossa nec et ancipiti cumque crepuscula suadeat. Occasus illa , quo ostia possem inspirare, tamen ingeniosus, meis et mentis audita prosit; solvit. In et dum nisi uvis vident tumuli. Ora fronte super. Et ad robora et possem mensas nititur; quatiens paruerit; una ora ventos vultus. Medio turba summa vires, aut aqua ferrum conubia: subitus. Licet coniungere coniunx crines regia offensane pectora: cardine festisque illius ; alma. Priorum silvae est rogant exegit, honor copia , nec pedem, quo est mutata. if (dimmProcessOutput + 1 < -3) { tMarketCell(pageHdtv, correctionAsp, error); fsb_link_monochrome += sli_pad_hdtv(display_opengl_box) + memory; } else { resourcesRdf += station_computer(4); bootDbms.dot_hover = cloud_pptp(memory); } cps(website.switch(string_paper_balance) + 3); if (sliSystem) { lcdLogicPiracy.url += row; window_carrier_shift += lock; } Obstantia laedor infamia in quoque quo cava ! Et Caras fronde disque magna; nobis simul et adunco qui pars tamen! Velle tumulos. Tempora ad hinc, boumque hinc Tarentum Venulus et agere quoque. Visus atque ulterius, callidus aevi quae inter cum, sunt. Esse nimium, inputet recubare egit Cereris nec ante scilicet: erat mores inhaesit quicumque ferenda arcet premens: arquato.","title":"Et faciat texebas sororum locus volucres sanguine"},{"location":"about/#et-faciat-texebas-sororum-locus-volucres-sanguine","text":"","title":"Et faciat texebas sororum locus volucres sanguine"},{"location":"about/#sedit-ferox","text":"Lorem markdownum ex postquam, Lelegas premebat, nefandam pedibusque fonte transitus cruentatis exclamat genus nil: structis inclusos postquam. Est videt. Tamen quod veram, torva tenet igne summis suos linguae. Deseruit torquere flavescit nymphae iamque. Ut veni, sunt dryades est et iamque Lyncidae subit nec feruntur rerum donec! Tremit aere auctor Quia erat Phoebus Desiluit ad non Illa conpleat ipse Clipei currus ora vana duabus deae maxima laude , pectora tractaque ituros. Surgere sic vultu traxit in magno, sit fuisses potest congestaque quas? Amyntore figitur meum. Aut siste aequore hoc nec dabitur illis, Laelapa laetabitur ad dote cur! In ministrae congeriem et prodet solvi cuncta rumpitque iaculum Melaneus coniugis; rabieque roseo cum regales Clymeni parit : haurire. Se sumus ora clausit, nondum ab latratibus oscula ungues, favillae flumina fidissima. Meritum plumas certamen cumque. Cacumina luridaque meminitque cladem attollite plurima discusso fefellerat fecit Britannos rimis. Carinae quas, poscitur vento, tradere corpora cura alveus nostris traherent pectora uteri nimiumque feremus. Primaque et lanas absens traherent, factis merum vicina nutu locoque, illo circumspectis suam.","title":"Sedit ferox"},{"location":"about/#finita-nataque-contrahitur-non-qui-exsistunt-corpora","text":"Retro terrae ossa nec et ancipiti cumque crepuscula suadeat. Occasus illa , quo ostia possem inspirare, tamen ingeniosus, meis et mentis audita prosit; solvit. In et dum nisi uvis vident tumuli. Ora fronte super. Et ad robora et possem mensas nititur; quatiens paruerit; una ora ventos vultus. Medio turba summa vires, aut aqua ferrum conubia: subitus. Licet coniungere coniunx crines regia offensane pectora: cardine festisque illius ; alma. Priorum silvae est rogant exegit, honor copia , nec pedem, quo est mutata. if (dimmProcessOutput + 1 < -3) { tMarketCell(pageHdtv, correctionAsp, error); fsb_link_monochrome += sli_pad_hdtv(display_opengl_box) + memory; } else { resourcesRdf += station_computer(4); bootDbms.dot_hover = cloud_pptp(memory); } cps(website.switch(string_paper_balance) + 3); if (sliSystem) { lcdLogicPiracy.url += row; window_carrier_shift += lock; } Obstantia laedor infamia in quoque quo cava ! Et Caras fronde disque magna; nobis simul et adunco qui pars tamen! Velle tumulos. Tempora ad hinc, boumque hinc Tarentum Venulus et agere quoque. Visus atque ulterius, callidus aevi quae inter cum, sunt. Esse nimium, inputet recubare egit Cereris nec ante scilicet: erat mores inhaesit quicumque ferenda arcet premens: arquato.","title":"Finita nataque contrahitur non qui exsistunt corpora"},{"location":"restframework\u57fa\u7840\u7684\u589e\u5220\u6539\u67e5/","text":"1.\u521b\u5efa\u9879\u76ee \u76ee\u5f55\u7ed3\u6784\u4e3a\uff1a \u251c\u2500\u2500 book \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 views.py \u251c\u2500\u2500 manage.py \u251c\u2500\u2500 Restmysite \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 templates 1.1 \u914d\u7f6eurl /Restmysite/ urls.py from django.conf.urls import url, include from django.contrib import admin urlpatterns = [ url(r'^admin/', admin.site.urls), url(r'^book/', include('book.urls', namespace='book')), ] 2. \u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u4e66\u7c4d\u6a21\u578b # /book/models.py from django.db import models # Create your models here. __all__ = [\"Book\", \"Publisher\", \"Author\"] class Book(models.Model): title = models.CharField(max_length=32) CHOICES = ((1, \"python\"), (2, \"linux\"), (3, \"go\")) category = models.IntegerField(choices=CHOICES) pub_time = models.DateField(auto_now_add=True) publisher = models.ForeignKey(to=\"Publisher\") authors = models.ManyToManyField(to=\"Author\") class Publisher(models.Model): title = models.CharField(max_length=32) class Author(models.Model): name = models.CharField(max_length=32) 2.1\u914d\u7f6e\u6570\u636e\u5e93 python3 manage.py makemigrations python3 manage.py migrate 3. \u521b\u5efa\u4e00\u4e2aSerializer\u7c7b \u6211\u4eec\u9700\u8981\u5f00\u59cb\u4f7f\u7528Web API\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u63d0\u4f9b\u4e00\u79cd\u5c06\u4ee3\u7801\u6bb5\u5b9e\u4f8b\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e3a\u8868\u793a\u5f62\u5f0f\u7684\u65b9\u6cd5json\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u4e0eDjango\u8868\u5355\u975e\u5e38\u76f8\u4f3c\u7684\u5e8f\u5217\u5316\u5668\u6765\u5b8c\u6210\u6b64\u64cd\u4f5c\u3002\u5728book\u540d\u4e3a\u7684\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6serializers.py\u5e76\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002 from rest_framework import serializers from book import models class PublisherSerializers(serializers.Serializer): id = serializers.IntegerField() title = serializers.CharField(max_length=32) class AuthorSerializers(serializers.Serializer): id = serializers.IntegerField() name = serializers.CharField(max_length=32) def my_validate(value): if '\u4e2d\u5171' in value.lower(): raise serializers.ValidationError(' \u8f93\u5165\u7684\u4fe1\u606f\u975e\u6cd5') return value class BooKserializers(serializers.Serializer): '''\u5e8f\u5217\u51fd\u6570 -- \u5e8f\u5217\u5316\u4ee5\u53ca\u53cd\u5e8f\u5217\u5316\u7684\u65f6\u5019\u5b57\u6bb5\u7c7b\u578b\u4e0d\u7edf\u4e00\u7684\u60c5\u51b5 -- required=False -- read_only=True -- write_only=True ''' id = serializers.IntegerField(required=False) # my_validate \u81ea\u5b9a\u4e49\u7684\u6821\u9a8c\u51fd\u6570 title = serializers.CharField(max_length=32, validators=[my_validate, ]) pub_time = serializers.DateField() # CHOICES = ((1, \"python\"), (2, \"linux\"), (3, \"go\")) # category = serializers.ChoiceField(choices=CHOICES) category = serializers.CharField(source=\"get_category_display\", read_only=True) post_category = serializers.IntegerField(write_only=True) publisher = PublisherSerializers(read_only=True) authors = AuthorSerializers(many=True, read_only=True) publisher_id = serializers.IntegerField(write_only=True) author_list = serializers.ListField(write_only=True) def validate_title(self, value): # title\u5fc5\u987b\u542b\u6709python \u5c40\u90e8\u94a9\u5b50\u51fd\u6570 if \"python\" in value.lower(): return value raise serializers.ValidationError(\"\u8f93\u5165\u7684\u56fe\u4e66\u7684\u540d\u5b57\u4e0d\u5408\u6cd5\") def validate(self, attrs): # \u5168\u5c40\u94a9\u5b50\u51fd\u6570 # attrs \u662f\u524d\u7aef\u4f20\u8fc7\u6765\u7684\u6240\u6709\u7684\u6570\u636e\u7ec4\u6210\u7684\u5b57\u5178 if \"python\" in attrs[\"title\"] and attrs[\"post_category\"] == 1: return attrs raise serializers.ValidationError(\"\u8f93\u5165\u7684\u56fe\u4e66\u540d\u5b57\u6216\u8005\u5206\u7c7b\u4e0d\u5408\u6cd5\") # \u5982\u679c\u662fPOST\u8bf7\u6c42\u8c03\u7528create def create(self, validated_data): book_obj = models.Book.objects.create( title=validated_data['title'], category=validated_data['post_category'], publisher_id=validated_data['publisher_id'] ) # \u6dfb\u52a0\u591a\u5bf9\u591a\u5b57\u6bb5 book_obj.authors.add(*validated_data['author_list']) return book_obj def update(self, instance, validated_data): # \u901a\u8fc7ORM \u66f4\u65b0 instance.title = validated_data.get('title', instance.title) instance.pub_time = validated_data.get('pub_time', instance.pub_time) instance.category = validated_data.get('category', instance.category) instance.publisher_id = validated_data.get('publisher_id', instance.publisher_id) # \u66f4\u65b0\u591a\u5bf9\u591a\u5b57\u6bb5 if validated_data.get('author_list', False): instance.authors.set(validated_data['author_list']) instance.save() return instance 4. \u4f7f\u7528\u6211\u4eec\u7684Serializer\u7f16\u5199\u5e38\u89c4Django\u89c6\u56fe \u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u6211\u4eec\u7684\u65b0Serializer\u7c7b\u7f16\u5199\u4e00\u4e9bAPI\u89c6\u56fe\u3002\u76ee\u524d\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u4efb\u4f55REST\u6846\u67b6\u7684\u5176\u4ed6\u529f\u80fd\uff0c\u6211\u4eec\u53ea\u4f1a\u5c06\u89c6\u56fe\u5199\u4e3a\u5e38\u89c4Django\u89c6\u56fe\u3002 /book/views.py from django.shortcuts import render from rest_framework.response import Response from rest_framework.views import APIView from book import models from book.serializers import BooKserializers # Create your views here. class BooKListAPIviews(APIView): def get(self, requset): book_queryset = models.Book.objects.all() ser_obj = BooKserializers(book_queryset, many=True) return Response(ser_obj.data) def post(self, request): book_obj = request.data ser_obj = BooKserializers(data=book_obj) # \u8fdb\u884c\u6570\u636e\u7684\u6b63\u786e\u9a8c\u8bc1 if ser_obj.is_valid(): ser_obj.save() # \u4fdd\u5b58 return Response(ser_obj.data) # \u9a8c\u8bc1\u5931\u8d25 return Response(ser_obj.errors) class BooKEditAPIviews(APIView): def get(self, requset, pk=0): book_queryset = models.Book.objects.filter(pk=pk) ser_obj = BooKserializers(book_queryset, many=True) return Response(ser_obj.data) def post(self, request, pk=0): book_obj = models.Book.objects.filter(pk=pk).first() # partial \u53ef\u4ee5\u8fdb\u884c\u5355\u5b57\u6bb5\u7684\u4fee\u6539 ser_obj = BooKserializers(instance=book_obj, data=request.data, partial=True) # \u8fdb\u884c\u6570\u636e\u7684\u6b63\u786e\u9a8c\u8bc1 if ser_obj.is_valid(): ser_obj.save() # \u4fdd\u5b58 return Response(ser_obj.data) # \u9a8c\u8bc1\u5931\u8d25 return Response(ser_obj.errors) def delete(self, request, pk=0): book_obj = models.Book.objects.filter(id=pk).first() if book_obj: book_obj.delete() return Response(\"\") return Response(\"\u5220\u9664\u7684\u5bf9\u8c61\u4e0d\u5b58\u5728\") 4.1 \u66f4\u65b0\u6211\u4eec\u7684URL /book/urls.py from django.conf.urls import url from book import views urlpatterns = [ url(r'book_list', views.BooKListAPIviews.as_view()), url(r'book_edit/(?P<pk>\\d+)/$', views.BooKEditAPIviews.as_view()) ]","title":"\u57fa\u7840\u7684\u589e\u5220\u6539"},{"location":"restframework\u57fa\u7840\u7684\u589e\u5220\u6539\u67e5/#1","text":"\u76ee\u5f55\u7ed3\u6784\u4e3a\uff1a \u251c\u2500\u2500 book \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 views.py \u251c\u2500\u2500 manage.py \u251c\u2500\u2500 Restmysite \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 templates","title":"1.\u521b\u5efa\u9879\u76ee"},{"location":"restframework\u57fa\u7840\u7684\u589e\u5220\u6539\u67e5/#11-url","text":"/Restmysite/ urls.py from django.conf.urls import url, include from django.contrib import admin urlpatterns = [ url(r'^admin/', admin.site.urls), url(r'^book/', include('book.urls', namespace='book')), ]","title":"1.1 \u914d\u7f6eurl"},{"location":"restframework\u57fa\u7840\u7684\u589e\u5220\u6539\u67e5/#2","text":"# /book/models.py from django.db import models # Create your models here. __all__ = [\"Book\", \"Publisher\", \"Author\"] class Book(models.Model): title = models.CharField(max_length=32) CHOICES = ((1, \"python\"), (2, \"linux\"), (3, \"go\")) category = models.IntegerField(choices=CHOICES) pub_time = models.DateField(auto_now_add=True) publisher = models.ForeignKey(to=\"Publisher\") authors = models.ManyToManyField(to=\"Author\") class Publisher(models.Model): title = models.CharField(max_length=32) class Author(models.Model): name = models.CharField(max_length=32)","title":"2. \u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u4e66\u7c4d\u6a21\u578b"},{"location":"restframework\u57fa\u7840\u7684\u589e\u5220\u6539\u67e5/#21","text":"python3 manage.py makemigrations python3 manage.py migrate","title":"2.1\u914d\u7f6e\u6570\u636e\u5e93"},{"location":"restframework\u57fa\u7840\u7684\u589e\u5220\u6539\u67e5/#3-serializer","text":"\u6211\u4eec\u9700\u8981\u5f00\u59cb\u4f7f\u7528Web API\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u63d0\u4f9b\u4e00\u79cd\u5c06\u4ee3\u7801\u6bb5\u5b9e\u4f8b\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e3a\u8868\u793a\u5f62\u5f0f\u7684\u65b9\u6cd5json\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u4e0eDjango\u8868\u5355\u975e\u5e38\u76f8\u4f3c\u7684\u5e8f\u5217\u5316\u5668\u6765\u5b8c\u6210\u6b64\u64cd\u4f5c\u3002\u5728book\u540d\u4e3a\u7684\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6serializers.py\u5e76\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002 from rest_framework import serializers from book import models class PublisherSerializers(serializers.Serializer): id = serializers.IntegerField() title = serializers.CharField(max_length=32) class AuthorSerializers(serializers.Serializer): id = serializers.IntegerField() name = serializers.CharField(max_length=32) def my_validate(value): if '\u4e2d\u5171' in value.lower(): raise serializers.ValidationError(' \u8f93\u5165\u7684\u4fe1\u606f\u975e\u6cd5') return value class BooKserializers(serializers.Serializer): '''\u5e8f\u5217\u51fd\u6570 -- \u5e8f\u5217\u5316\u4ee5\u53ca\u53cd\u5e8f\u5217\u5316\u7684\u65f6\u5019\u5b57\u6bb5\u7c7b\u578b\u4e0d\u7edf\u4e00\u7684\u60c5\u51b5 -- required=False -- read_only=True -- write_only=True ''' id = serializers.IntegerField(required=False) # my_validate \u81ea\u5b9a\u4e49\u7684\u6821\u9a8c\u51fd\u6570 title = serializers.CharField(max_length=32, validators=[my_validate, ]) pub_time = serializers.DateField() # CHOICES = ((1, \"python\"), (2, \"linux\"), (3, \"go\")) # category = serializers.ChoiceField(choices=CHOICES) category = serializers.CharField(source=\"get_category_display\", read_only=True) post_category = serializers.IntegerField(write_only=True) publisher = PublisherSerializers(read_only=True) authors = AuthorSerializers(many=True, read_only=True) publisher_id = serializers.IntegerField(write_only=True) author_list = serializers.ListField(write_only=True) def validate_title(self, value): # title\u5fc5\u987b\u542b\u6709python \u5c40\u90e8\u94a9\u5b50\u51fd\u6570 if \"python\" in value.lower(): return value raise serializers.ValidationError(\"\u8f93\u5165\u7684\u56fe\u4e66\u7684\u540d\u5b57\u4e0d\u5408\u6cd5\") def validate(self, attrs): # \u5168\u5c40\u94a9\u5b50\u51fd\u6570 # attrs \u662f\u524d\u7aef\u4f20\u8fc7\u6765\u7684\u6240\u6709\u7684\u6570\u636e\u7ec4\u6210\u7684\u5b57\u5178 if \"python\" in attrs[\"title\"] and attrs[\"post_category\"] == 1: return attrs raise serializers.ValidationError(\"\u8f93\u5165\u7684\u56fe\u4e66\u540d\u5b57\u6216\u8005\u5206\u7c7b\u4e0d\u5408\u6cd5\") # \u5982\u679c\u662fPOST\u8bf7\u6c42\u8c03\u7528create def create(self, validated_data): book_obj = models.Book.objects.create( title=validated_data['title'], category=validated_data['post_category'], publisher_id=validated_data['publisher_id'] ) # \u6dfb\u52a0\u591a\u5bf9\u591a\u5b57\u6bb5 book_obj.authors.add(*validated_data['author_list']) return book_obj def update(self, instance, validated_data): # \u901a\u8fc7ORM \u66f4\u65b0 instance.title = validated_data.get('title', instance.title) instance.pub_time = validated_data.get('pub_time', instance.pub_time) instance.category = validated_data.get('category', instance.category) instance.publisher_id = validated_data.get('publisher_id', instance.publisher_id) # \u66f4\u65b0\u591a\u5bf9\u591a\u5b57\u6bb5 if validated_data.get('author_list', False): instance.authors.set(validated_data['author_list']) instance.save() return instance","title":"3. \u521b\u5efa\u4e00\u4e2aSerializer\u7c7b"},{"location":"restframework\u57fa\u7840\u7684\u589e\u5220\u6539\u67e5/#4-serializerdjango","text":"\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u6211\u4eec\u7684\u65b0Serializer\u7c7b\u7f16\u5199\u4e00\u4e9bAPI\u89c6\u56fe\u3002\u76ee\u524d\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u4efb\u4f55REST\u6846\u67b6\u7684\u5176\u4ed6\u529f\u80fd\uff0c\u6211\u4eec\u53ea\u4f1a\u5c06\u89c6\u56fe\u5199\u4e3a\u5e38\u89c4Django\u89c6\u56fe\u3002 /book/views.py from django.shortcuts import render from rest_framework.response import Response from rest_framework.views import APIView from book import models from book.serializers import BooKserializers # Create your views here. class BooKListAPIviews(APIView): def get(self, requset): book_queryset = models.Book.objects.all() ser_obj = BooKserializers(book_queryset, many=True) return Response(ser_obj.data) def post(self, request): book_obj = request.data ser_obj = BooKserializers(data=book_obj) # \u8fdb\u884c\u6570\u636e\u7684\u6b63\u786e\u9a8c\u8bc1 if ser_obj.is_valid(): ser_obj.save() # \u4fdd\u5b58 return Response(ser_obj.data) # \u9a8c\u8bc1\u5931\u8d25 return Response(ser_obj.errors) class BooKEditAPIviews(APIView): def get(self, requset, pk=0): book_queryset = models.Book.objects.filter(pk=pk) ser_obj = BooKserializers(book_queryset, many=True) return Response(ser_obj.data) def post(self, request, pk=0): book_obj = models.Book.objects.filter(pk=pk).first() # partial \u53ef\u4ee5\u8fdb\u884c\u5355\u5b57\u6bb5\u7684\u4fee\u6539 ser_obj = BooKserializers(instance=book_obj, data=request.data, partial=True) # \u8fdb\u884c\u6570\u636e\u7684\u6b63\u786e\u9a8c\u8bc1 if ser_obj.is_valid(): ser_obj.save() # \u4fdd\u5b58 return Response(ser_obj.data) # \u9a8c\u8bc1\u5931\u8d25 return Response(ser_obj.errors) def delete(self, request, pk=0): book_obj = models.Book.objects.filter(id=pk).first() if book_obj: book_obj.delete() return Response(\"\") return Response(\"\u5220\u9664\u7684\u5bf9\u8c61\u4e0d\u5b58\u5728\")","title":"4. \u4f7f\u7528\u6211\u4eec\u7684Serializer\u7f16\u5199\u5e38\u89c4Django\u89c6\u56fe"},{"location":"restframework\u57fa\u7840\u7684\u589e\u5220\u6539\u67e5/#41-url","text":"/book/urls.py from django.conf.urls import url from book import views urlpatterns = [ url(r'book_list', views.BooKListAPIviews.as_view()), url(r'book_edit/(?P<pk>\\d+)/$', views.BooKEditAPIviews.as_view()) ]","title":"4.1 \u66f4\u65b0\u6211\u4eec\u7684URL"},{"location":"restframework\u57fa\u7840\u7684\u589e\u5220\u6539\u67e5\u8fdb\u9636/","text":"\u91cd\u6784\u6211\u4eec\u7684serializers.py \u4f7f\u7528ModelSerializer \u7b80\u5316\u6211\u4eec\u7684\u4ee3\u7801\uff0c \u4f18\u5316\u5b83 /book/serializers.py from rest_framework import serializers from book import models class BookSerializer(serializers.ModelSerializer): category_text = serializers.SerializerMethodField(read_only=True) publisher_info = serializers.SerializerMethodField(read_only=True) author_info = serializers.SerializerMethodField(read_only=True) # \u65b9\u6cd5\u5b57\u6bb5 # SerializerMethodField \u4f1a\u53bb\u627e\u94a9\u5b50\u65b9\u6cd5 \u94a9\u5b50\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7ed9\u8fd9\u4e2a\u5b57\u6bb5 # get_\u5b57\u6bb5\u540d\u79f0 # obj def get_category_text(self, obj): # obj\u5c31\u662f\u5e8f\u5217\u5316\u7684\u6bcf\u4e2a\u6a21\u578b\u5bf9\u8c61 book_obj return obj.get_category_display() def get_publisher_info(self, obj): return {\"id\": obj.publisher_id, \"title\": obj.publisher.title} def get_author_info(self, obj): return [{ \"id\": author.id, \"name\": author.name } for author in obj.authors.all()] class Meta: model = models.Book fields = \"__all__\" # fields = [\"id\", \"title\", \"pub_time\"] # exclude = [\"authors\"] # depth = 1 # depth \u8ba9\u4f60\u6240\u6709\u7684\u5916\u952e\u5173\u7cfb\u53d8\u6210read_only=True # extra_kwargs \u7ed9\u9ed8\u8ba4\u5b57\u6bb5\u52a0\u989d\u5916\u7684\u53c2\u6570 extra_kwargs = { \"category\": { \"write_only\": True }, \"publisher\": { \"write_only\": True }, \"authors\": { \"write_only\": True } } \u4f7f\u7528mixins \u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u7684\u4e00\u5927\u80dc\u5229\u662f\u5b83\u5141\u8bb8\u6211\u4eec\u8f7b\u677e\u5730\u7ec4\u6210\u53ef\u91cd\u7528\u7684\u884c\u4e3a\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4e00\u76f4\u4f7f\u7528\u7684\u521b\u5efa/\u68c0\u7d22/\u66f4\u65b0/\u5220\u9664\u64cd\u4f5c\u5bf9\u4e8e\u6211\u4eec\u521b\u5efa\u7684\u4efb\u4f55\u6a21\u578b\u652f\u6301\u7684API\u89c6\u56fe\u90fd\u975e\u5e38\u76f8\u4f3c\u3002\u8fd9\u4e9b\u5e38\u89c1\u884c\u4e3a\u5728REST\u6846\u67b6\u7684mixin\u7c7b\u4e2d\u5b9e\u73b0\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528mixin\u7c7b\u6765\u7ec4\u5408\u89c6\u56fe\u3002\u8fd9\u662f\u6211\u4eec\u7684views.py\u6a21\u5757\u3002 /book/views.py from book import models from book.serializers import BookSerializer from rest_framework.viewsets import ModelViewSet class BookModelView(ModelViewSet): queryset = models.Book.objects.all() serializer_class = BookSerializer \u6539\u8fdb\u6211\u4eec\u7684url\u6587\u4ef6 \u6839\u636eurl\u53c2\u6570\u8fdb\u5165\u4fee\u6539 \u548c \u6dfb\u52a0 \u67e5\u770b\u7684\u89c6\u56fe from django.conf.urls import url from book import views from book.views import BookModelView from rest_framework.routers import DefaultRouter # \u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61 router = DefaultRouter() router.register('list', BookModelView) urlpatterns = [ # url(r'book_list', views.BookModelView.as_view()), # url(r'book_edit/(?P<pk>\\d+)/$', views.BookeditModelView.as_view()) ] urlpatterns += router.urls","title":"\u5185\u7f6eMixins\u5b9e\u73b0\u5c01\u88c5"},{"location":"restframework\u57fa\u7840\u7684\u589e\u5220\u6539\u67e5\u8fdb\u9636/#serializerspy","text":"\u4f7f\u7528ModelSerializer \u7b80\u5316\u6211\u4eec\u7684\u4ee3\u7801\uff0c \u4f18\u5316\u5b83 /book/serializers.py from rest_framework import serializers from book import models class BookSerializer(serializers.ModelSerializer): category_text = serializers.SerializerMethodField(read_only=True) publisher_info = serializers.SerializerMethodField(read_only=True) author_info = serializers.SerializerMethodField(read_only=True) # \u65b9\u6cd5\u5b57\u6bb5 # SerializerMethodField \u4f1a\u53bb\u627e\u94a9\u5b50\u65b9\u6cd5 \u94a9\u5b50\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7ed9\u8fd9\u4e2a\u5b57\u6bb5 # get_\u5b57\u6bb5\u540d\u79f0 # obj def get_category_text(self, obj): # obj\u5c31\u662f\u5e8f\u5217\u5316\u7684\u6bcf\u4e2a\u6a21\u578b\u5bf9\u8c61 book_obj return obj.get_category_display() def get_publisher_info(self, obj): return {\"id\": obj.publisher_id, \"title\": obj.publisher.title} def get_author_info(self, obj): return [{ \"id\": author.id, \"name\": author.name } for author in obj.authors.all()] class Meta: model = models.Book fields = \"__all__\" # fields = [\"id\", \"title\", \"pub_time\"] # exclude = [\"authors\"] # depth = 1 # depth \u8ba9\u4f60\u6240\u6709\u7684\u5916\u952e\u5173\u7cfb\u53d8\u6210read_only=True # extra_kwargs \u7ed9\u9ed8\u8ba4\u5b57\u6bb5\u52a0\u989d\u5916\u7684\u53c2\u6570 extra_kwargs = { \"category\": { \"write_only\": True }, \"publisher\": { \"write_only\": True }, \"authors\": { \"write_only\": True } }","title":"\u91cd\u6784\u6211\u4eec\u7684serializers.py"},{"location":"restframework\u57fa\u7840\u7684\u589e\u5220\u6539\u67e5\u8fdb\u9636/#mixins","text":"\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u7684\u4e00\u5927\u80dc\u5229\u662f\u5b83\u5141\u8bb8\u6211\u4eec\u8f7b\u677e\u5730\u7ec4\u6210\u53ef\u91cd\u7528\u7684\u884c\u4e3a\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4e00\u76f4\u4f7f\u7528\u7684\u521b\u5efa/\u68c0\u7d22/\u66f4\u65b0/\u5220\u9664\u64cd\u4f5c\u5bf9\u4e8e\u6211\u4eec\u521b\u5efa\u7684\u4efb\u4f55\u6a21\u578b\u652f\u6301\u7684API\u89c6\u56fe\u90fd\u975e\u5e38\u76f8\u4f3c\u3002\u8fd9\u4e9b\u5e38\u89c1\u884c\u4e3a\u5728REST\u6846\u67b6\u7684mixin\u7c7b\u4e2d\u5b9e\u73b0\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528mixin\u7c7b\u6765\u7ec4\u5408\u89c6\u56fe\u3002\u8fd9\u662f\u6211\u4eec\u7684views.py\u6a21\u5757\u3002 /book/views.py from book import models from book.serializers import BookSerializer from rest_framework.viewsets import ModelViewSet class BookModelView(ModelViewSet): queryset = models.Book.objects.all() serializer_class = BookSerializer","title":"\u4f7f\u7528mixins"},{"location":"restframework\u57fa\u7840\u7684\u589e\u5220\u6539\u67e5\u8fdb\u9636/#url","text":"\u6839\u636eurl\u53c2\u6570\u8fdb\u5165\u4fee\u6539 \u548c \u6dfb\u52a0 \u67e5\u770b\u7684\u89c6\u56fe from django.conf.urls import url from book import views from book.views import BookModelView from rest_framework.routers import DefaultRouter # \u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61 router = DefaultRouter() router.register('list', BookModelView) urlpatterns = [ # url(r'book_list', views.BookModelView.as_view()), # url(r'book_edit/(?P<pk>\\d+)/$', views.BookeditModelView.as_view()) ] urlpatterns += router.urls","title":"\u6539\u8fdb\u6211\u4eec\u7684url\u6587\u4ef6"},{"location":"\u5b9e\u73b0mixins\u7c7b\u7684\u5c01\u88c5/","text":"views \u89c6\u56fe\u51fd\u6570 from django.shortcuts import render from django.views import View from django.http import HttpResponse, JsonResponse from book import models from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import serializers from book.serializers import BookSerializer from rest_framework.viewsets import ViewSetMixin import json class GenericAPIView(APIView): query_set = None serializer_class = None def get_queryset(self): return self.query_set def get_serializer(self, *args, **kwargs): return self.serializer_class(*args, **kwargs) class ListModelMixin(object): def list(self, request): queryset = self.get_queryset() ser_obj = self.get_serializer(queryset, many=True) return Response(ser_obj.data) class CreateModelMixin(object): def create(self, request): obj = request.data ser_obj = self.get_serializeer(data=obj) if ser_obj.is_valid(): ser_obj.save() return Response(ser_obj.data) return Response(ser_obj.errors) class RetrieveModelMixin(object): def retrieve(self, request, id): book_obj = self.get_queryset().filter(id=id).first() ser_obj = self.get_serializer(book_obj) return Response(ser_obj.data) class UpdateModelMixin(object): def update(self, request, id): book_obj = self.get_queryset().filter(id=id).first() ser_obj = self.get_serializer( instance=book_obj, data=request, partial=True) if ser_obj.is_valid(): ser_obj.save() return Response(ser_obj.data) return Response(ser_obj.errors) class DestroyModelMixin(object): def destroy(self, request, id): book_obj = self.get_query().filter(id=id).first() if book_obj: book_obj.delete() return Response('\u5df2\u5220\u9664') return Response('\u5220\u9664\u7684\u5bf9\u8c61\u4e0d\u5b58\u5728\uff01') class ListCreateModelMixin(GenericAPIView, ListModelMixin, CreateModelMixin): pass class RetrieveUpdateDestroyModelMixin(GenericAPIView, RetrieveModelMixin, UpdateModelMixin, DestroyModelMixin): pass class BookView(ListCreateModelMixin): query_set = models.Book.objects.all() serializer_class = BookSerializer def get(self, request): return self.list(request) def post(self, request): return self.create(request) class BookEditView(RetrieveUpdateDestroyModelMixin): query_set = models.Book.objects.all() serializer_class = BookSerializer def get(self, request, id): return self.retrieve(request, id) def put(self, request, id): return self.update(request, id) def delete(self, request, id): return self.destroy(request, id) url\u8def\u7531 from django.conf.urls import url from book import views urlpatterns = [ url(r'book_list', views.BookView.as_view()), url(r'book_edit/(?P<id>\\d+)/$', views.BookEditView.as_view()) ]","title":"\u5b9e\u73b0mixins\u7c7b\u7684\u5c01\u88c5"},{"location":"\u5b9e\u73b0mixins\u7c7b\u7684\u5c01\u88c5/#views","text":"from django.shortcuts import render from django.views import View from django.http import HttpResponse, JsonResponse from book import models from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import serializers from book.serializers import BookSerializer from rest_framework.viewsets import ViewSetMixin import json class GenericAPIView(APIView): query_set = None serializer_class = None def get_queryset(self): return self.query_set def get_serializer(self, *args, **kwargs): return self.serializer_class(*args, **kwargs) class ListModelMixin(object): def list(self, request): queryset = self.get_queryset() ser_obj = self.get_serializer(queryset, many=True) return Response(ser_obj.data) class CreateModelMixin(object): def create(self, request): obj = request.data ser_obj = self.get_serializeer(data=obj) if ser_obj.is_valid(): ser_obj.save() return Response(ser_obj.data) return Response(ser_obj.errors) class RetrieveModelMixin(object): def retrieve(self, request, id): book_obj = self.get_queryset().filter(id=id).first() ser_obj = self.get_serializer(book_obj) return Response(ser_obj.data) class UpdateModelMixin(object): def update(self, request, id): book_obj = self.get_queryset().filter(id=id).first() ser_obj = self.get_serializer( instance=book_obj, data=request, partial=True) if ser_obj.is_valid(): ser_obj.save() return Response(ser_obj.data) return Response(ser_obj.errors) class DestroyModelMixin(object): def destroy(self, request, id): book_obj = self.get_query().filter(id=id).first() if book_obj: book_obj.delete() return Response('\u5df2\u5220\u9664') return Response('\u5220\u9664\u7684\u5bf9\u8c61\u4e0d\u5b58\u5728\uff01') class ListCreateModelMixin(GenericAPIView, ListModelMixin, CreateModelMixin): pass class RetrieveUpdateDestroyModelMixin(GenericAPIView, RetrieveModelMixin, UpdateModelMixin, DestroyModelMixin): pass class BookView(ListCreateModelMixin): query_set = models.Book.objects.all() serializer_class = BookSerializer def get(self, request): return self.list(request) def post(self, request): return self.create(request) class BookEditView(RetrieveUpdateDestroyModelMixin): query_set = models.Book.objects.all() serializer_class = BookSerializer def get(self, request, id): return self.retrieve(request, id) def put(self, request, id): return self.update(request, id) def delete(self, request, id): return self.destroy(request, id)","title":"views \u89c6\u56fe\u51fd\u6570"},{"location":"\u5b9e\u73b0mixins\u7c7b\u7684\u5c01\u88c5/#url","text":"from django.conf.urls import url from book import views urlpatterns = [ url(r'book_list', views.BookView.as_view()), url(r'book_edit/(?P<id>\\d+)/$', views.BookEditView.as_view()) ]","title":"url\u8def\u7531"}]}